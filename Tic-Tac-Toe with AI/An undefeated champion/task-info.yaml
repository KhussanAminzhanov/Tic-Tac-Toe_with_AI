type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }

        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 6) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    case 4: initial = "start user hard\n"; break;
                    case 5: initial = "start hard user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard hard\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy hard\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start hard easy\nexit"));


            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Arrays;
    import java.util.stream.Collectors;

    public class Field {
        private Symbol[][] field;
        private boolean xIsNext;
        private Symbol winner;

        public Field() {
            xIsNext = true;
            field = new Symbol[][]{
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY},
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY},
                    {Symbol.EMPTY, Symbol.EMPTY, Symbol.EMPTY}
            };
            winner = null;
        }

        boolean isFree(int x, int y) {
            int column = x - 1;
            int row = 3 - y;

            return field[row][column] == Symbol.EMPTY;
        }

        void set(int x, int y) {
            if (!isFree(x, y) || winner != null) {
                throw new IllegalStateException();
            }

            int column = x - 1;
            int row = 3 - y;

            field[row][column] = nextSymbol();
            xIsNext = !xIsNext;

            winner = checkWinner();
        }

        private Symbol checkWinner() {
            if (checkRows(Symbol.X) || checkColumns(Symbol.X) || checkDiagonals(Symbol.X)) {
                return Symbol.X;
            } else if (checkRows(Symbol.O) || checkColumns(Symbol.O) || checkDiagonals(Symbol.O)) {
                return Symbol.O;
            } else if (isFilled()) {
                return Symbol.EMPTY;
            }
            return null;
        }

        boolean willWin(int x, int y, Symbol symbol) {
            int column = x - 1;
            int row = 3 - y;

            if (isFree(x, y)) {
                Symbol before = field[row][column];
                field[row][column] = symbol;

                boolean won = checkWinner() == symbol;

                field[row][column] = before;
                return won;
            }
            return false;
        }

        Symbol nextSymbol() {
            return xIsNext ? Symbol.X : Symbol.O;
        }

        private boolean checkRows(Symbol symbol) {
            for (int i = 0; i < 3; i++) {
                if (field[i][0] == symbol && field[i][1] == symbol && symbol == field[i][2]) {
                    return true;
                }
            }
            return false;
        }

        private boolean checkColumns(Symbol symbol) {
            for (int i = 0; i < 3; i++) {
                if (field[0][i] == symbol && field[1][i] == symbol && field[2][i] == symbol) {
                    return true;
                }
            }
            return false;
        }

        private boolean checkDiagonals(Symbol symbol) {
            return (field[1][1] == symbol) &&
                    (((field[0][0] == symbol) && (field[2][2] == symbol)) ||
                            ((field[0][2] == symbol) && (field[2][0] == symbol)));
        }

        private boolean isFilled() {
            return Arrays.stream(field)
                    .flatMap(Arrays::stream)
                    .noneMatch(symbol -> symbol == Symbol.EMPTY);
        }

        public boolean continues() {
            return winner == null;
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------")
                    .append(System.lineSeparator());

            for (Symbol[] row : field) {
                String line = Arrays.stream(row).map(Symbol::getSymbol).collect(Collectors.joining(" "));

                stringBuilder.append("| ")
                        .append(line)
                        .append((" |"))
                        .append(System.lineSeparator());
            }

            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        public Symbol getWinner() {
            return winner;
        }

        public int[][] getEmptyCells() {
            int numberEmptyCells = getNumberEmptyCells();
            int[][] emptyCells = new int[numberEmptyCells][2];
            int k = 0;
            for (int i = 0; i < field.length; i++) {
                for (int j = 0; j < field[i].length; j++) {
                    if (field[i][j] == Symbol.EMPTY) {
                        emptyCells[k] = new int[]{j + 1, 3 - i};
                        k++;
                    }
                }
            }
            return emptyCells;
        }

        public int getNumberEmptyCells() {
            int count = 0;
            for (Symbol[] symbols : field) {
                for (Symbol symbol : symbols) {
                    if (symbol == Symbol.EMPTY) {
                        count++;
                    }
                }
            }
            return count;
        }
    }
  learner_created: true
- name: src/tictactoe/EasyAI.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;

    public class EasyAI implements Player {
        Random random = new Random();

        @Override
        public void move(Field field) {
            System.out.println(field);
            System.out.println("Making move level \"easy\"");

            int x, y;

            do {
                x = random.nextInt(3) + 1;
                y = random.nextInt(3) + 1;
            } while (!field.isFree(x, y));

            field.set(x, y);
        }
    }
  learner_created: true
- name: src/tictactoe/RealPlayer.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class RealPlayer implements Player {
        @Override
        public void move(Field field) {
            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println(field);

                System.out.print("Enter coordinates: ");
                try {
                    int x = scanner.nextInt();
                    int y = scanner.nextInt();

                    if (x < 1 || x > 3 || y < 1 || y > 3) {
                        System.out.println("Coordinates should be from 1 to 3!");
                    } else if (field.isFree(x, y)) {
                        field.set(x, y);
                        break;
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                } catch (InputMismatchException e) {
                    System.out.println("You should enter numbers!");
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;

    interface Player {
        static Player of(String type) {
            switch (type) {
                case "easy":
                    return new EasyAI();
                case "user":
                    return new RealPlayer();
                case "medium":
                    return new MediumAI();
                default:
                    return null;
            }
        }

        void move(Field field);

        default void moveRandomly(Field field) {
            Random random = new Random();
            int x, y;

            do {
                x = random.nextInt(3) + 1;
                y = random.nextInt(3) + 1;
            } while (!field.isFree(x, y));

            field.set(x, y);
        }

        default boolean checkNextTurnWin(Field field, Symbol symbol) {
            for (int i = 1; i < 4; i++) {
                for (int j = 1; j < 4; j++) {
                    if (field.willWin(i, j, symbol)) {
                        field.set(i, j);
                        return true;
                    }
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/tictactoe/MediumAI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class MediumAI implements Player {

        Random random = new Random();

        public void move(Field field) {
            System.out.println(field);
            System.out.println("Making move level \"medium\"");

            Symbol symbol = field.nextSymbol();
            int x, y;
            int[][] emptyCells = field.getEmptyCells();

            for (int[] emptyCell : emptyCells) {
                if (field.willWin(emptyCell[0], emptyCell[1], symbol)) {
                    x = emptyCell[0];
                    y = emptyCell[1];
                    field.set(x, y);
                    return;
                }
            }

            symbol = symbol == Symbol.O ? Symbol.X : Symbol.O;
            for (int[] emptyCell : emptyCells) {
                if (field.willWin(emptyCell[0], emptyCell[1], symbol)) {
                    x = emptyCell[0];
                    y = emptyCell[1];
                    field.set(x, y);
                    return;
                }
            }

            int[] randomCoordinates = emptyCells[random.nextInt(emptyCells.length)];
            field.set(randomCoordinates[0], randomCoordinates[1]);
        }
    }
  learner_created: true
- name: src/tictactoe/HardAI.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Fri, 09 Oct 2020 10:47:20 UTC
record: -1
